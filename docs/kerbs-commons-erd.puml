@startuml Kerbs Commons - Entity Relationship Diagram
!theme hacker
title Kerbs Commons Data Structure - JPA Entity Model

' ====================
' ABSTRACT CLASSES & SUPERCLASSES
' ====================

abstract class "Facturable" as Facturable #FFFFCC {
  + valoruUnitarioReal : double
  --
  @MappedSuperclass
  @Column(name = "facturable_valor_unitario_real")
  --
  {abstract} getPrecioTotal() : double
}

abstract class "Servicio" as Servicio #E6F7FF {
  + id : int
  + estado : EstadoServicio
  + estadoContable : EstadoContableServicio
  + estadoOperacion : EstadoOperacion
  + numeroSolicitud : int
  --
  @Inheritance(TABLE_PER_CLASS)
  @Id @Column(name = "servicio_id")
  @Enumerated(STRING)
}

abstract class "Precio" as Precio #FFE6CC {
  + id : String
  + valor : double
  + descripcion : String
  + activo : boolean
  --
  @Inheritance(SINGLE_TABLE)
  @DiscriminatorColumn(name = "precio_tipo")
  @Id @Column(name = "precio_id")
  --
  {abstract} getPrecioTotal() : double
}

' ====================
' COMPOSITE KEY CLASSES
' ====================

class "HeladeraId" as HeladeraId #F0F0F0 {
  + marca : String
  + serie : String
  --
  @Embeddable
  Implements Serializable
  Composite Primary Key
}

' ====================
' CONCRETE ENTITIES
' ====================

class "TipoHeladera" as TipoHeladera #E6FFE6 {
  + id : Long
  + descripcion : String
  + activo : boolean
  --
  @Entity @Table(name = "tipo_heladera")
  @Id @GeneratedValue(SEQUENCE)
  @Column(name = "tipo_id")
  @Column(name = "tipo_descripcion", unique=true)
  @Column(name = "tipo_activo")
}

class "Heladera" as Heladera #E6FFE6 {
  + marca : String
  + serie : String
  + empresa : String
  + activo : String
  + modelo : String
  + numeroCliente : String
  + razonSocial : String
  + direccion : String
  + localidad : String
  + enTaller : boolean
  --
  @Entity @Table(name = "heladera")
  @IdClass(HeladeraId.class)
  @Id @Column(name = "heladera_marca")
  @Id @Column(name = "heladera_nro_serie")
  Composite Primary Key (marca, serie)
}

class "Acondicionamiento" as Acondicionamiento #E6F7FF {
  + fechaAsignacion : LocalDate
  + fechaIngreso : LocalDate
  + fechaResolucion : LocalDate
  + fechaSalida : LocalDate
  + tecnico : String
  + observaciones : String
  --
  @Entity @Table(name = "acondicionamiento")
  Extends Servicio
  @Column(name = "acond_fecha_asignacion")
  @Column(name = "acond_tecnico")
}

class "Viaje" as Viaje #E6F7FF {
  + fechaResolucion : LocalDate
  --
  @Entity @Table(name = "viaje")
  Extends Servicio
  @Column(name = "viaje_fecha_resolucion")
}

class "Reparacion" as Reparacion #FFE6F7 {
  + id : int
  + cantidad : double
  + observaciones : String
  --
  @Entity @Table(name = "reparacion")
  Extends Facturable
  @Id @GeneratedValue(IDENTITY)
  @Column(name = "reparacion_id")
  @Column(name = "reparacion_cantidad")
}

class "Movimiento" as Movimiento #FFE6F7 {
  + id : int
  + kmExcedente : double
  --
  @Entity @Table(name = "movimiento")
  Extends Facturable
  @Id @GeneratedValue(IDENTITY)
  @Column(name = "movimiento_id")
  @Column(name = "movimiento_km_excedente")
}

class "ManoDeObra" as ManoDeObra #FFE6CC {
  --
  @Entity
  @DiscriminatorValue("MANO DE OBRA")
  Extends Precio
  --
  getPrecioTotal() : double
}

class "Repuesto" as Repuesto #FFE6CC {
  --
  @Entity
  @DiscriminatorValue("REPUESTO")
  Extends Precio
  --
  getPrecioTotal() : double
}

' ====================
' ENUMS
' ====================

enum EstadoServicio #F0F8FF {
  PENDIENTE
  EN_PROCESO
  REALIZADO
  FALLIDO
  --
  Chain: PENDIENTE → EN_PROCESO → REALIZADO
  Alternative: → FALLIDO
  Each has siguienteEstado field
}

enum EstadoContableServicio #F0F8FF {
  PENDIENTE_PROFORMA
  PENDIENTE_NOTIFICACION_CLIENTE
  PENDIENTE_FACTURACION
  FACTURADA
  COBRADA
  --
  Billing workflow chain
}

enum EstadoOperacion #F0F8FF {
  PENDIENTE_INFORME
  INFORMADA
  --
  Simple two-state enum
}

' ====================
' INHERITANCE RELATIONSHIPS
' ====================

Facturable <|-- Reparacion
Facturable <|-- Movimiento
Servicio <|-- Acondicionamiento
Servicio <|-- Viaje
Precio <|-- ManoDeObra
Precio <|-- Repuesto

' ====================
' ENTITY RELATIONSHIPS
' ====================

' Heladera relationships
TipoHeladera ||--o{ Heladera : "tipo"
Heladera ||--o{ Acondicionamiento : "heladera"
Heladera ||--o{ Movimiento : "heladera"

' Precio relationships
TipoHeladera ||--o{ Precio : "tipoHeladera"
Precio ||--o{ Reparacion : "precio"
Precio ||--o{ Movimiento : "precio (inventario)"

' Service relationships
Acondicionamiento ||--o{ Reparacion : "acondicionamiento"
Viaje ||--o{ Movimiento : "viaje"

' Composite key relationship
Heladera ||--|| HeladeraId : "uses composite key"

' Enum relationships
Servicio }o--|| EstadoServicio : "estado"
Servicio }o--|| EstadoContableServicio : "estadoContable"
Servicio }o--|| EstadoOperacion : "estadoOperacion"

' ====================
' DETAILED ANNOTATIONS
' ====================

note top of Heladera
@JoinColumn(name = "heladera_tipo_id")
@OneToMany(mappedBy = "heladera", cascade = ALL)
Composite FK to Acondicionamiento:
@JoinColumns({
  @JoinColumn(name = "acond_heladera_marca"),
  @JoinColumn(name = "acond_heladera_serie")
})
end note

note bottom of Precio
Single Table Inheritance:
- precio_tipo discriminator column
- ManoDeObra: "MANO DE OBRA"
- Repuesto: "REPUESTO"
@ManyToOne TipoHeladera optional
end note

note right of Acondicionamiento
@ManyToOne Heladera via composite FK
@OneToMany Reparacion cascade ALL
Table Per Class inheritance
Dual state management:
- Operations: estado, estadoOperacion
- Billing: estadoContable
end note

note left of Reparacion
@ManyToOne Precio with CASCADE MERGE
@ManyToOne Acondicionamiento
@JoinColumn(name = "reparacion_precio_id")
@JoinColumn(name = "reparacion_acondicionamiento")
Extends Facturable for billing
end note

note bottom of Facturable
@MappedSuperclass
Shared field for all billable items
Abstract method forces implementation
Used for pricing calculations
end note

note right of Servicio
@Inheritance(TABLE_PER_CLASS)
Each subclass has own table
Shared state management fields
Sequential ID generation
end note

' ====================
' CASCADE PATTERNS
' ====================

package "Cascade Patterns" {
  note as CascadeInfo
  Ownership & Cascade Rules:
  
  1. Heladera → Acondicionamiento (CascadeType.ALL)
     Strong ownership - delete heladera removes all services
     
  2. Acondicionamiento → Reparacion (CascadeType.ALL)
     Strong ownership - delete service removes all repairs
     
  3. Reparacion → Precio (CascadeType.MERGE)
     Reference only - precio is inventory, not owned
     
  4. Movimiento → Heladera (No cascade)
     Reference only - movements don't own equipment
     
  5. Viaje → Movimiento (mappedBy ownership)
     Viaje owns movimientos conceptually
  end note
}

' ====================
' DATABASE MAPPING STRATEGY
' ====================

package "Database Mapping Strategy" {
  note as MappingInfo
  Column Naming Convention:
  - Entity prefix + field name
  - heladera_marca, acond_tecnico, reparacion_cantidad
  - Consistent across all tables
  
  Key Strategies:
  - Composite keys for business entities (Heladera)
  - Generated IDs for transactional entities
  - String IDs for reference data (Precio)
  
  Inheritance Strategies:
  - TABLE_PER_CLASS: Servicio hierarchy
  - SINGLE_TABLE: Precio hierarchy
  - @MappedSuperclass: Facturable shared fields
  end note
}

@enduml